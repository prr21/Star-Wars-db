{"version":3,"sources":["components/error-indicator/death-star.png","components/header/index.js","components/header/header.js","components/loading/index.js","components/loading/loading.js","components/error-indicator/index.js","components/error-indicator/errorIndicator.js","services/swapi-services.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/error-boundary/index.js","components/error-boundary/error-boundary.js","components/error-btn/index.js","components/error-btn/error-btn.js","components/item-list/index.js","components/item-list/item-list.js","components/hoc-helper/compose.js","components/hoc-helper/with-data.js","components/swapi-service-context/index.js","components/hoc-helper/with-swapi.js","components/hoc-helper/with-child-function.js","components/sw-components/list.js","components/item-details/item-details.js","components/item-details/index.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/row/index.js","components/row/row.js","components/pages/person-page.js","components/pages/planet-page.js","components/pages/starship-page.js","components/pages/secret-page.js","components/pages/login-page.js","services/dummy-swapi-service.js","components/app/index.js","components/app/app.js","index.js"],"names":["module","exports","Header","onToggleData","className","to","exact","onClick","Loading","style","width","height","ErrorIndicator","src","deathStar","alt","SwapiResorse","_swapi","_imageBase","getResourse","url","a","fetch","res","ok","Error","status","json","body","getPerson","id","person","_transformPeople","getPlanet","planet","_transformPlanet","getStarship","ship","_transformShip","getAllPeople","results","map","getAllPlanets","getAllStarships","getImagePerson","getImagePlanet","getImageStarship","_extractId","item","match","name","population","rotationPeriod","rotation_period","diameter","climate","model","manufacturer","cost_in_credits","length","mass","hairColor","hair_color","skinColor","skin_color","eyeColor","eye_color","birthYear","birth_year","gender","RandomPlanet","swapiResorse","state","loading","error","onError","setState","onPlanetLoaded","updateInterval","this","props","updatePlanet","intervalId","setInterval","clearInterval","Math","floor","random","then","catch","showError","load","content","Component","defaultProps","PlanetView","Fragment","ErrorBoundary","hasError","info","console","log","children","ErrorBtn","throwError","foo","bar","NaN","ItemList","data","selectedItem","renderItem","items","label","key","compose","func","wrap","reduceRight","prevFunc","f","withData","View","componentDidMount","update","prevProps","getData","React","createContext","SwapiProvider","Provider","SwapiConsumer","Consumer","withSwapi","mapMethodsToProps","Wrapped","swapi","serviceProps","withChildFunction","fn","renderName","PersonList","PlanetList","StarshipList","Record","field","ItemDetails","itemId","getImageUrl","useState","setStatus","imageItem","itemDetails","changeItemDetails","useEffect","updateItem","img","DefaultDiv","ShowLoading","ShowItem","Children","child","cloneElement","Row","firstWidget","secondWidget","withRouter","history","params","push","PlanetPage","SecretPage","isLogged","LoginPage","login","DummySwapiService","_people","_planets","_starships","costInCredits","crew","passengers","cargoCapacity","App","showRandomPlanet","toggleRandomPlanet","onLogin","TestResorse","value","path","render","component","PersonPage","StarshipPage","ReactDom","document","getElementById"],"mappings":"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","file":"static/js/main.cad338e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/death-star.098eebd8.png\";","import Header from './header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './header.css';\r\n\r\nconst Header = ({ onToggleData }) => {\r\n    return (\r\n        <div className=\"header d-flex justify-content-between\">\r\n            <div className=\"d-flex\">\r\n                <h3>\r\n                    {<Link to=\"/\" exact='true'>Star DB</Link>}\r\n                </h3>\r\n\r\n                <ul className=\"d-flex\">\r\n                    <li> <Link to=\"/people/\">People</Link> </li>\r\n                    <li> <Link to=\"/planets/\">Planets</Link> </li>\r\n                    <li> <Link to=\"/starships/\">Starships</Link> </li>\r\n                    <li> <Link to=\"/login\">Login</Link> </li>\r\n                    <li> <Link to=\"/secret\">Secret</Link> </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"d-flex align-items-center\">\r\n                <button \r\n                    className=\"btn btn-md btn-primary\"\r\n                    onClick={onToggleData}>\r\n                    Change Data\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import Loading from './loading';\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\n\r\nimport './loading.css';\r\n\r\nconst ItemList = () => {\r\n    return (\r\n        <div className=\"lds-css ng-scope loading\">\r\n            <div style={{width: '100%',height:'100%'}} className=\"lds-rolling\">\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ItemList","import ErrorIndicator from './errorIndicator'\r\n\r\nexport default ErrorIndicator","import React from 'react'\r\nimport './errorIndicator.css'\r\nimport deathStar from './death-star.png'\r\n\r\nconst ErrorIndicator = () => {\r\n\treturn (\r\n\t\t<div className=\"error-wrap\">\r\n\t\t\t<img src={deathStar} alt=\"death-star error\"/>\r\n\t\t\t<span>Something Gone Wrong!</span>\r\n\t\t\t<span>Sorry about that</span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ErrorIndicator","export default class SwapiResorse {\r\n\t_swapi = 'https://swapi.dev/api/'\r\n\t_imageBase = 'https://starwars-visualguide.com/assets/img'\r\n\r\n\tgetResourse = async (url) => {\r\n\t\tconst res = await fetch(this._swapi + url)\r\n\r\n\t\tif (!res.ok) {\r\n\t\t\tthrow new Error(`Cannot find url ${res.url}! Code ${res.status}`)\r\n\t\t}\r\n\t\tconst body = await res.json()\r\n\t\treturn body\r\n\t}\r\n\r\n\tgetPerson = async (id) =>{\r\n\t\tconst person = await this.getResourse(`people/${id}/`)\r\n\t\treturn this._transformPeople(person)\r\n\t}\r\n\tgetPlanet = async (id) => {\r\n\t\tconst planet = await this.getResourse(`planets/${id}/`)\r\n\t\treturn this._transformPlanet(planet)\r\n\t}\r\n\tgetStarship = async (id) => {\r\n  \tconst ship = await this.getResourse(`starships/${id}/`)\r\n  \treturn this._transformShip(ship)\r\n  }\r\n  \r\n\tgetAllPeople = async () => {\r\n\t\tconst res = await this.getResourse('people/')\r\n\t\treturn res.results.map( this._transformPeople )\r\n\t}\r\n\tgetAllPlanets = async () => {\r\n\t\tconst res = await this.getResourse('planets/')\r\n\t\treturn res.results.map( this._transformPlanet )\r\n\t}\r\n \tgetAllStarships = async () => {\r\n  \tconst res = await this.getResourse('starships/')\r\n  \treturn res.results.map( this._transformShip )\r\n  }\r\n\r\n  getImagePerson = (id) => {\r\n    return `${this._imageBase}/characters/${id}.jpg`\r\n  }\r\n  getImagePlanet = (id) => {\r\n    return `${this._imageBase}/planets/${id}.jpg`\r\n  }\r\n  getImageStarship = (id) => {\r\n    return `${this._imageBase}/starships/${id}.jpg`\r\n  }\r\n\r\n  \t_extractId = (item) => {\r\n  \t\tconst re = /\\/([0-9]*)\\/$/\r\n  \t\tconst id = item.url.match(re)[1]\r\n  \t\t\r\n  \t\treturn id\r\n  \t}\r\n\r\n  \t_transformPlanet = (planet) => {\r\n  \t\tconst id = this._extractId(planet);\r\n  \t\treturn {\r\n            id,\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter,\r\n            climate: planet.climate\r\n  \t\t}\r\n  \t}\r\n\r\n  \t_transformShip = (ship) => {\r\n  \t\tconst id = this._extractId(ship);\r\n  \t\treturn {\r\n  \t\t\tid,\r\n  \t\t\tname: ship.name,\r\n  \t\t\tmodel: ship.model,\r\n  \t\t\tmanufacturer: ship.manufacturer,\r\n  \t\t\tcost_in_credits: ship.cost_in_credits,\r\n  \t\t\tlength: ship.length\r\n  \t\t}\r\n  \t}\r\n\r\n  \t_transformPeople = (person) => {\r\n  \t\tconst id = this._extractId(person);\r\n  \t\treturn {\r\n  \t\t\tid,\r\n  \t\t\tname: person.name,\r\n  \t\t\theight: person.height,\r\n  \t\t\tmass: person.mass,\r\n  \t\t\thairColor: person.hair_color,\r\n  \t\t\tskinColor: person.skin_color,\r\n  \t\t\teyeColor: person.eye_color,\r\n  \t\t\tbirthYear: person.birth_year,\r\n  \t\t\tgender: person.gender\r\n  \t\t}\r\n  \t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Loading from '../loading';\r\nimport ErrorIndicator from '../error-indicator';\r\nimport SwapiResorse from '../../services/swapi-services';\r\n\r\nimport './random-planet.css';\r\n\r\nexport default class RandomPlanet extends Component {\r\n    swapiResorse = new SwapiResorse()\r\n\r\n    static defaultProps = {\r\n        updateInterval: 10000\r\n    }\r\n\r\n    static propTypes = {\r\n        updateInterval: PropTypes.number\r\n    }\r\n\r\n    state = {\r\n        planet: {},\r\n        loading: true,\r\n        error: false\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { updateInterval } = this.props\r\n        this.updatePlanet()\r\n\r\n        this.intervalId = setInterval(() => {\r\n            this.updatePlanet()\r\n        }, updateInterval)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.intervalId)\r\n    }\r\n\r\n    onError = () => {\r\n        this.setState({\r\n            loading: false,\r\n            error: true\r\n        })\r\n    }\r\n\r\n    onPlanetLoaded = (planet) => {\r\n        this.setState({\r\n            planet,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    updatePlanet(){\r\n        const id = Math.floor( Math.random() * 19) + 2;\r\n\r\n        this.swapiResorse.getPlanet(id)\r\n            .then(this.onPlanetLoaded)\r\n            .catch(this.onError)\r\n    }\r\n\r\n    render() {\r\n        const { planet, loading, error } = this.state\r\n\r\n        const showError =  error  ? <ErrorIndicator /> : null\r\n        const load      =  loading ? <Loading /> : null\r\n        const content   = (!loading && !error) ? <PlanetView planet={planet} /> : null\r\n\r\n        return (\r\n            <div className=\"random-planet jumbotron rounded\">\r\n                {showError}\r\n                {load}\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst PlanetView = ( {planet} ) => {\r\n    const { id, name, population, rotationPeriod, diameter } = planet\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img className=\"planet-image\" alt={name}\r\n                src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} />\r\n\r\n            <div>\r\n                <h4>{name}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population:</span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Rotation Period:</span>\r\n                        <span>{rotationPeriod}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Diameter:</span>\r\n                        <span>{diameter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","import RandomPlanet from './random-planet';\r\n\r\nexport default RandomPlanet;\r\n","import ErrorBoundary from './error-boundary'\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react'\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nimport './error-boundary.css'\r\n\r\nexport default class ErrorBoundary extends Component {\r\n\r\n\tstate = {\r\n\t\thasError: false\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tconsole.log(info)\r\n\r\n\t\tthis.setState({\r\n\t\t\thasError: true\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <ErrorIndicator />\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}","import ErrorBtn from './error-btn'\r\n\r\nexport default ErrorBtn","import React, { Component } from 'react'\r\nimport './error-btn.css'\r\n\r\nexport default class ErrorBtn extends Component {\r\n\tstate = {\r\n\t\tthrowError: false\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\tif (this.state.throwError) {\r\n\t\t\treturn this.foo.bar = NaN\r\n\t\t}\r\n\t\treturn(\r\n\t\t\t<button className=\"btn btn-lg btn-danger\"\r\n\t\t\tonClick={ () => this.setState({throwError: true}) }>\r\n\t\t\t\tDestroy this\r\n\t\t\t</button>\r\n\t\t)\r\n\t}\r\n}","import ItemList from './item-list';\r\n\r\nexport default ItemList;\r\n","import React from 'react';\r\nimport './item-list.css';\r\n\r\nconst ItemList = (props) => {\r\n\r\n    const { data, selectedItem, children: renderItem } = props\r\n    const items = data.map((item) => {\r\n\r\n        const label = renderItem(item)\r\n        const { id } = item\r\n\r\n        return (\r\n            <li className=\"list-group-item\"\r\n                onClick={ () => selectedItem(id)}\r\n                key={id}>\r\n                {label}\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <ul className=\"item-list list-group\">\r\n           {items}\r\n        </ul>\r\n    );\r\n}\r\nexport default ItemList","const compose = (...func) => (wrap) => {\r\n\treturn func.reduceRight((prevFunc, f) => f(prevFunc), wrap)\r\n}\r\n\r\nexport default compose","import React, { Component } from 'react'\r\nimport ErrorIndicator from '../error-indicator';\r\nimport Loading from '../loading';\r\n\r\nconst withData = (View) => {\r\n    return class extends Component {\r\n\r\n        state = {\r\n            data: null,\r\n            loading: false,\r\n            error: false\r\n        }\r\n\r\n        componentDidUpdate(prevProps){\r\n            if (this.props.getData !== prevProps.getData) {\r\n\r\n                this.setState({\r\n                    loading: true\r\n                })\r\n\r\n                this.update()\r\n            }\r\n        }\r\n\r\n        componentDidMount = () => {\r\n            this.update()\r\n        }\r\n\r\n        update(){\r\n            this.props.getData()\r\n                .then((data) => {\r\n                    this.setState({\r\n                        data,\r\n                        loading: false,\r\n                        error: false\r\n                    })\r\n                })\r\n                .catch (() => {\r\n                    this.setState({\r\n                        error: true,\r\n                        loading: false\r\n                    });\r\n                })\r\n        }\r\n\r\n        render(){\r\n            const { data, loading, error } = this.state\r\n            \r\n            if (!data || loading) {\r\n                return (\r\n                    <div className=\"d-flex\"> \r\n                        <Loading />\r\n                    </div>\r\n                )\r\n                \r\n            } else if (error) {\r\n                return <ErrorIndicator />\r\n            }\r\n\r\n            return <View {...this.props} data={data}/>\r\n        }\r\n    }\r\n}\r\n\r\nexport default withData\r\n","import React from 'react';\r\n\r\nconst { \r\n\tProvider: SwapiProvider,\r\n\tConsumer: SwapiConsumer\r\n} = React.createContext()\r\n\r\nexport {\r\n\tSwapiProvider,\r\n\tSwapiConsumer\r\n}","import React from 'react';\r\nimport { SwapiConsumer } from '../swapi-service-context';\r\n\r\nconst withSwapi = (mapMethodsToProps) => (Wrapped) => {\r\n\treturn(props) => {\r\n\t  \treturn (\r\n\t  \t\t<SwapiConsumer>\r\n\t  \t\t{\r\n\t            (swapi) => {\r\n\t            \tconst serviceProps = mapMethodsToProps(swapi)\r\n\r\n\t                return (\r\n\t                \t<Wrapped {...props} {...serviceProps}/>\r\n\t                )\r\n\t            }\r\n\t        }\r\n\t        </SwapiConsumer>\r\n    \t)\r\n    }\r\n}\r\n\r\nexport default withSwapi","import React from 'react';\r\n\r\nconst withChildFunction = (fn) => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <Wrapped {...props}>\r\n                {fn}\r\n            </Wrapped>\r\n        )\r\n    };\r\n};\r\n\r\nexport default withChildFunction;","import React from 'react';\r\nimport ItemList from '../item-list';\r\nimport { compose, withData, withSwapi, withChildFunction } from '../hoc-helper';\r\n\r\nconst mapPersonMethodsToProps = (swapi) => {\r\n    return {\r\n        getData: swapi.getAllPeople\r\n    }\r\n}\r\nconst mapPlanetMethodsToProps = (swapi) => {\r\n    return {\r\n        getData: swapi.getAllPlanets\r\n    }\r\n}\r\nconst mapStarshipMethodsToProps = (swapi) => {\r\n    return {\r\n        getData: swapi.getAllStarships\r\n    }\r\n}\r\n\r\nconst renderName = ({ name }) => <span>{name}</span>;\r\nconst renderModelAndName = ({ model, name}) => <span>{name} ({model})</span>;\r\n\r\nconst PersonList = compose(\r\n                        withSwapi(mapPersonMethodsToProps),\r\n                        withData,\r\n                        withChildFunction(renderName)\r\n                    )(ItemList)\r\n\r\nconst PlanetList = compose(\r\n                        withSwapi(mapPlanetMethodsToProps),\r\n                        withData,\r\n                        withChildFunction(renderName)\r\n                    )(ItemList)\r\n\r\nconst StarshipList = compose(\r\n                        withSwapi(mapStarshipMethodsToProps),\r\n                        withData,\r\n                        withChildFunction(renderModelAndName)\r\n                    )(ItemList)\r\n\r\nexport { \r\n\tPersonList,\r\n  \tPlanetList,\r\n  \tStarshipList  }","import React, { useState, useEffect } from 'react';\r\nimport Loading from '../loading';\r\nimport ErrorIndicator from '../error-indicator';\r\nimport ErrorBoundary from '../error-boundary';\r\nimport ErrorBtn from '../error-btn';\r\n\r\nimport './item-details.css';\r\n\r\nconst Record = ({ item, field, label }) => {\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <span className=\"term\">{label}:</span>\r\n            <span>{ item[field] }</span>\r\n        </li>\r\n    )\r\n}\r\nexport { Record }\r\n\r\nconst ItemDetails = ( {itemId, getData, getImageUrl, children} ) => {\r\n\r\n    const [ status, setStatus ]              = useState( {loading: true, error: false} );\r\n    const [ itemDetails, changeItemDetails ] = useState( {imageItem: null, item: null} );\r\n\r\n    useEffect(() => {\r\n        function update(){\r\n            updateItem();\r\n        }\r\n        update();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        function update(){\r\n            setStatus( {loading:true, error:false} );\r\n            updateItem()\r\n        }\r\n        update()\r\n        \r\n    }, [itemId, getData, getImageUrl])\r\n\r\n    const updateItem = () => {\r\n        if (!itemId) {\r\n            return setStatus( {loading:false, error:false} );\r\n        }\r\n\r\n        getData(itemId)\r\n            .then((item) => {\r\n                setStatus( {loading:false, error:false} );\r\n\r\n                changeItemDetails({\r\n                    item,\r\n                    imageItem: getImageUrl(itemId)\r\n                })\r\n            })\r\n            .catch(() => {\r\n                setStatus( {loading:false, error:true} );\r\n            })\r\n    }\r\n\r\n    const decideContent = () => {\r\n        if (status.loading) {\r\n            return <ShowLoading />\r\n\r\n        } else if (!itemDetails.item) {\r\n            return <DefaultDiv />\r\n            \r\n        } else if (status.error) {\r\n            return <ErrorIndicator />\r\n\r\n        } else {\r\n            return <ShowItem \r\n                children={children} \r\n                img={itemDetails.imageItem}\r\n                item={itemDetails.item} />\r\n        }\r\n    }\r\n\r\n    return decideContent();\r\n}\r\n\r\nexport default ItemDetails\r\n\r\nconst DefaultDiv = () => {\r\n    return (\r\n        <div className=\"text-center p-4 border border-secondary bg-light\">\r\n            <span>Выберите ячейку</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ShowLoading = () => {\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <Loading />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ShowItem = ({item, img, children}) => {\r\n    return (\r\n        <ErrorBoundary>\r\n        <div className=\"item-details card\">\r\n\r\n            <img className=\"item-image\"  \r\n                alt={item.name + ' star-wars'}\r\n                src={img}/>\r\n    \r\n            <div className=\"card-body\">\r\n                <h4>{item.name}</h4>\r\n    \r\n                <ul className=\"list-group list-group-flush\">\r\n                    {\r\n                        React.Children.map(children, (child) => {\r\n                            return React.cloneElement(child, { item });\r\n                        })\r\n                    }\r\n                </ul>\r\n                \r\n                <ErrorBtn />\r\n            </div>\r\n\r\n        </div>\r\n        </ErrorBoundary>\r\n    )\r\n}","import ItemDetails, { Record } from './item-details';\r\n\r\nexport default ItemDetails;\r\n\r\nexport { Record };\r\n","import React from 'react';\r\n\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapi } from '../hoc-helper'\r\n\r\nconst PersonDetails = (props) => {\r\n    return (\r\n        <ItemDetails {...props}>\r\n            <Record field=\"gender\" label=\"Gender\" />\r\n            <Record field=\"eyeColor\" label=\"Eye Color\" />\r\n        </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapi) => {\r\n    return {\r\n        getData: swapi.getPerson,\r\n        getImageUrl: swapi.getImagePerson\r\n    }\r\n}\r\n\r\nexport default withSwapi(mapMethodsToProps)(PersonDetails)\r\n","import React from 'react';\r\n\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapi } from '../hoc-helper';\r\n\r\nconst PlanetDetails = (props) => {\r\n    return (\r\n        <ItemDetails {...props}>\r\n            <Record field=\"population\" label=\"Population\" />\r\n            <Record field=\"rotationPeriod\" label=\"Rotation Period\" />\r\n            <Record field=\"diameter\" label=\"Diameter\" />\r\n        </ItemDetails>\r\n    );\r\n};\r\n\r\nconst mapMethodsToProps = (swapi) => {\r\n    return {\r\n        getData: swapi.getPlanet,\r\n        getImageUrl: swapi.getImagePlanet\r\n    }\r\n}\r\n\r\nexport default withSwapi(mapMethodsToProps)(PlanetDetails)","import React from 'react';\r\n\r\nimport ItemDetails, {Record} from '../item-details';\r\nimport { withSwapi } from '../hoc-helper';\r\n\r\nconst StarshipDetails =\t(props) => {\r\n\treturn (\r\n\t\t<ItemDetails {...props}>\r\n\t        <Record field=\"model\" label=\"Model\" />\r\n\t        <Record field=\"length\" label=\"Length\" />\r\n\t        <Record field=\"cost_in_credits\" label=\"Cost\" />\r\n\t    </ItemDetails>\r\n\t);\r\n}\r\n\r\nconst mapMethodsToProps = (swapi) => {\r\n\treturn {\r\n\t\tgetData: swapi.getStarship,\r\n\t\tgetImageUrl: swapi.getImageStarship\r\n\t}\r\n}\r\n\r\nexport default withSwapi(mapMethodsToProps)(StarshipDetails)","import Row from './row'\r\n\r\nexport default Row","import React from 'react'\r\n\r\nimport './row.css'\r\n\r\nconst Row = ({firstWidget, secondWidget}) => {\r\n\treturn (\r\n\t\t\t<div className=\"row mb-4\">\r\n                <div className=\"col-md-6\">\r\n                \t{firstWidget}\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                \t{secondWidget}\r\n                </div>\r\n            </div>\r\n\t)\r\n}\r\n\r\nexport default Row","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Row from '../row';\r\nimport { PersonList, PersonDetails } from '../sw-components';\r\n\r\nconst PersonPage = ({ match, history }) => {\r\n\tconst { id } = match.params\r\n\r\n    return (\r\n    \t<Row \r\n            firstWidget = { <PersonList selectedItem={(id) => history.push(id)} /> } \r\n            secondWidget = { <PersonDetails itemId={id} /> }\r\n        />\r\n    )\r\n}\r\n\r\nexport default withRouter(PersonPage)","import React, { Component } from 'react';\r\nimport Row from '../row';\r\nimport { PlanetList, PlanetDetails } from '../sw-components';\r\n\r\nexport default class PlanetPage extends Component {\r\n\r\n\tstate = {\r\n\t\titemId: null\r\n\t}\r\n\r\n\tselectedItem = (itemId) => {\r\n\t\tthis.setState({\r\n\t\t\titemId\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { itemId } = this.state\r\n\r\n\t    return (\r\n\t    \t<Row \r\n\t            firstWidget = { <PlanetList selectedItem={this.selectedItem}/> } \r\n\t            secondWidget = { <PlanetDetails itemId={itemId} /> }\r\n\t        />\r\n\t    )\r\n\t}\r\n}","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { StarshipList } from '../sw-components';\r\n\r\nconst StarshipPage = ({ history }) => {\r\n\r\n\treturn(\r\n        <StarshipList selectedItem={(itemId) => {\r\n        \thistory.push(`/starships/${itemId}`)\r\n        }}/> \r\n    )\r\n}\r\n\r\nexport default withRouter(StarshipPage)","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst SecretPage = ({ isLogged }) => {\r\n\tif (isLogged) {\r\n\t\treturn (\r\n\t\t\t<div className='text-center mt-4 p-4 bg-success'>\r\n\t\t\t\t<h2>Hi there!</h2>\r\n\t\t\t\t<p>This page full of secrets! Dont tell about it to somebody...</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\treturn (\r\n\t\t<Redirect to='/login'/>\r\n\t)\r\n}\r\n\r\nexport default SecretPage","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginPage = ({ isLogged, login }) => {\r\n\tif (isLogged) {\r\n\t\treturn <Redirect to=\"/\"/>;\r\n\t}\r\n\treturn (\r\n\t\t<div className='text-center mt-4'>\r\n\t\t\t<p className='text-warning'>You've got to login to see a secret page!</p>\r\n\t\t\t<button \r\n\t\t\t\tclassName='btn btn-md btn-primary'\r\n\t\t\t\tonClick={ login }>\r\n\t\t\t\tLogin\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default LoginPage","export default class DummySwapiService {\r\n\r\n  _people = [\r\n    {\r\n      id: 1,\r\n      name: 'Bilbo Baggins [TEST DATA]',\r\n      gender: 'male',\r\n      birthYear: 'long ago',\r\n      eyeColor: 'dark brown'\r\n    },\r\n\r\n    {\r\n      id: 2,\r\n      name: 'Frodo Baggins [TEST DATA]',\r\n      gender: 'male',\r\n      birthYear: 'long ago',\r\n      eyeColor: 'dark brown'\r\n    }\r\n  ];\r\n\r\n  _planets = [\r\n    {\r\n      id: 1,\r\n      name: 'Earth [TEST DATA]',\r\n      population: '7.530.000.000',\r\n      rotationPeriod: '23 hours 56 seconds',\r\n      diameter: '12.742 km'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Venus [TEST DATA]',\r\n      population: 'not known',\r\n      rotationPeriod: '243 days',\r\n      diameter: '12.104 km'\r\n    }\r\n  ];\r\n\r\n  _starships = [\r\n    {\r\n      id: 1,\r\n      name: 'USS Enterprise [TEST DATA]',\r\n      model: 'NCC-1701-C',\r\n      manufacturer: 'Northrop Grumman Shipbuilding',\r\n      costInCredits: 'not known',\r\n      length: 'approx 300 meters',\r\n      crew: 1000,\r\n      passengers: 50,\r\n      cargoCapacity: 100\r\n    }\r\n  ];\r\n\r\n  getAllPeople = async () => {\r\n    return this._people;\r\n  };\r\n\r\n  getPerson = async () => {\r\n    return this._people[0];\r\n  };\r\n\r\n  getAllPlanets = async () => {\r\n    return this._planets;\r\n  };\r\n\r\n  getPlanet = async () => {\r\n    return this._planets[0]\r\n  };\r\n\r\n  getAllStarships = async () => {\r\n    return this._starships;\r\n  };\r\n\r\n  getStarship = async () => {\r\n    return this._starships[0];\r\n  };\r\n\r\n  getImagePerson = () => {\r\n    return `https://placeimg.com/400/500/people`\r\n  };\r\n\r\n  getImagePlanet = () => {\r\n    return `https://placeimg.com/400/400/nature`\r\n  };\r\n\r\n  getImageStarship = () => {\r\n    return `https://placeimg.com/600/400/tech`;\r\n  };\r\n}\r\n","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Header from '../header';\r\nimport RandomPlanet from '../random-planet';\r\nimport ErrorBoundary from '../error-boundary';\r\nimport ErrorBtn from '../error-btn';\r\n\r\nimport {StarshipDetails}from \"../sw-components\";\r\nimport {\r\n    PersonPage,\r\n    PlanetPage,\r\n    StarshipPage,\r\n    LoginPage,\r\n    SecretPage\r\n} from '../pages'\r\n\r\nimport { SwapiProvider } from '../swapi-service-context'\r\nimport SwapiResorse from '../../services/swapi-services';\r\nimport TestResorse from '../../services/dummy-swapi-service';\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n\r\n    state = {\r\n        showRandomPlanet: true,\r\n        swapiResorse: new SwapiResorse(),\r\n        isLogged: false\r\n    }\r\n\r\n    toggleRandomPlanet = () => {\r\n        this.setState((state) => {\r\n            return {\r\n                showRandomPlanet: !state.showRandomPlanet\r\n            }\r\n        })\r\n    }\r\n\r\n    onLogin = () => {\r\n        this.setState({\r\n            isLogged: true\r\n        })\r\n    }\r\n\r\n    onToggleData = () => {\r\n        this.setState(({ swapiResorse }) => {\r\n\r\n            const apiResorse = swapiResorse instanceof TestResorse\r\n                                ? SwapiResorse : TestResorse\r\n\r\n            return {\r\n                swapiResorse: new apiResorse()\r\n            }\r\n        }) \r\n    }\r\n\r\n    render(){\r\n\r\n        const { showRandomPlanet, swapiResorse, isLogged } = this.state\r\n\r\n        const planet = showRandomPlanet ?\r\n            <RandomPlanet /> :\r\n            null;\r\n\r\n        return (\r\n            <ErrorBoundary>\r\n              <SwapiProvider value={swapiResorse}>\r\n                <Router>\r\n                  <Header onToggleData={this.onToggleData}/>\r\n\r\n                  { planet }\r\n\r\n                  <div className=\"row mb-2 button-row\">\r\n                      <button\r\n                          className=\"toggle-planet btn btn-warning btn-lg\"\r\n                          onClick={this.toggleRandomPlanet}>\r\n                          Toggle Random Planet\r\n                      </button>\r\n                      <ErrorBtn />\r\n                  </div>\r\n\r\n                  <Switch>\r\n                    <Route path='/' exact render={ () => \r\n                        <h2 className='text-center mt-4'>Welcome To Star DB Application!</h2>\r\n                    } />\r\n\r\n                    <Route path='/people/:id?' component={ PersonPage } />\r\n                    <Route path='/planets' component={ PlanetPage } />\r\n                    <Route path='/starships' exact component={ StarshipPage } />\r\n\r\n                    <Route path='/login' exact render={ () =>\r\n                        <LoginPage isLogged={isLogged} login={this.onLogin}/>\r\n                    } />\r\n\r\n                    <Route path='/secret' exact render={ () =>\r\n                        <SecretPage isLogged={isLogged}/>\r\n                    } />\r\n\r\n                    <Route path='/starships/:id' render={({ match }) => \r\n                        <StarshipDetails itemId={match.params.id} />\r\n                    } />\r\n\r\n                    <Route render={ () => {\r\n                        return (\r\n                            <div className=\"text-center mt-4\">\r\n                                <h3>404 – page not found</h3>\r\n                            </div>)}\r\n                    }/>\r\n                  </Switch>\r\n\r\n                </Router>\r\n              </SwapiProvider>\r\n            </ErrorBoundary>\r\n        );\r\n    }\r\n};","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\n\r\nimport App from './components/app'\r\n\r\nReactDom.render(<App />, document.getElementById('root'))"],"sourceRoot":""}